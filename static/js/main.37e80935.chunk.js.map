{"version":3,"sources":["utils/getAlt.ts","components/Carousel.tsx","bits/Input/Input.tsx","components/Form/Form.tsx","App.tsx","index.tsx"],"names":["getAlt","filename","match","parseInt","Carousel","photos","itemWidth","animationDuration","frameSize","step","infinite","useState","translateValue","setTranslateValue","maxTranslate","length","className","style","width","transition","map","image","transform","src","alt","String","type","onClick","newTranslateValue","Math","min","max","Input","id","title","onChangeHandler","placeholder","initialValue","htmlFor","value","onChange","Form","setFrameSize","setWidth","setStep","setAnimationDuration","setInfinite","imagesArray","App","state","images","event","setState","target","checked","this","React","PureComponent","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.37e80935.chunk.js","sourcesContent":["export function getAlt(filename: string) {\n  const match = filename.match(/\\d+/);\n\n  return match && parseInt(match[0], 10);\n}\n","import React, { useState } from 'react';\nimport './Carousel.scss';\nimport { getAlt } from '../utils';\n\ntype Props = {\n  photos: string[];\n  itemWidth: number;\n  frameSize: number;\n  animationDuration: number;\n  step: number;\n  infinite: boolean;\n};\n\nconst Carousel: React.FC<Props> = ({\n  photos,\n  itemWidth,\n  animationDuration,\n  frameSize,\n  step,\n  infinite,\n}) => {\n  const [translateValue, setTranslateValue] = useState(0);\n\n  const maxTranslate = photos.length * itemWidth - (frameSize * itemWidth);\n\n  // const handleNextPic = () => {\n  //   setTranslateValue(prev => Math.max(prev - itemWidth * step, -maxTranslate));\n  // };\n\n  // const handlePrevPic = () => {\n  //   setTranslateValue(prev => Math.min(prev + itemWidth * step, 0));\n  // };\n\n  const handleNextPic = () => {\n    const newTranslateValue = translateValue - itemWidth * step;\n\n    if (infinite) {\n      setTranslateValue(() => {\n        return newTranslateValue <= -maxTranslate ? 0 : newTranslateValue;\n      });\n    } else {\n      setTranslateValue(() => Math.max(newTranslateValue, -maxTranslate));\n    }\n  };\n\n  const handlePrevPic = () => {\n    const newTranslateValue = translateValue + itemWidth * step;\n\n    if (infinite) {\n      setTranslateValue(() => {\n        return newTranslateValue > 0 ? -maxTranslate : newTranslateValue;\n      });\n    } else {\n      setTranslateValue(() => Math.min(newTranslateValue, 0));\n    }\n  };\n\n  return (\n    <div\n      className=\"Carousel\"\n      style={{\n        width: `${itemWidth * frameSize}px`,\n        transition: `${animationDuration}ms ease`,\n      }}\n    >\n      <ul\n        className=\"Carousel__list\"\n        style={{\n          width: `${itemWidth * frameSize}px`,\n        }}\n      >\n        {photos.map(image => (\n          <li\n            key={getAlt(image)}\n            style={{\n              transform: `translateX(${translateValue}px)`,\n              transition: `${animationDuration}ms`,\n            }}\n          >\n            <img\n              src={image}\n              alt={String(getAlt(image))}\n              style={{ width: `${itemWidth}px` }}\n            />\n          </li>\n        ))}\n      </ul>\n\n      <div className=\"Carousel__buttons\">\n        <button\n          type=\"button\"\n          className=\"Carousel__button\"\n          onClick={handlePrevPic}\n        >\n          Prev\n        </button>\n\n        <button\n          type=\"button\"\n          className=\"Carousel__button\"\n          data-cy=\"next\"\n          onClick={handleNextPic}\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","/* eslint-disable react/require-default-props */\n/* eslint-disable react/no-unused-prop-types */\nimport React from 'react';\nimport './Input.scss';\n\ntype InputType = 'number' | 'checkbox';\n\ntype Props = {\n  type: InputType;\n  id?: string;\n  title: string;\n  max?: number;\n  min?: number;\n  placeholder?: string;\n  initialValue: number | boolean;\n  step?: number;\n  onChangeHandler?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport const Input: React.FC<Props> = ({\n  id,\n  title,\n  onChangeHandler,\n  placeholder,\n  type,\n  initialValue,\n  step,\n  max,\n  min,\n}) => {\n  return (\n    <div className=\"input\">\n      <label\n        className=\"input__label\"\n        htmlFor={id}\n      >\n        {title}\n      </label>\n      <input\n        type={type}\n        value={+initialValue}\n        className=\"input__field\"\n        id={id}\n        onChange={onChangeHandler}\n        placeholder={placeholder}\n        step={step}\n        max={max}\n        min={min}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport './Form.scss';\nimport { Input } from '../../bits/Input';\n\ntype Props = {\n  itemWidth: number,\n  frameSize: number,\n  step: number,\n  animationDuration: number,\n  infinite: boolean,\n  setWidth: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  setFrameSize: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  setStep: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  setAnimationDuration: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  setInfinite: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport const Form: React.FC<Props> = ({\n  setFrameSize,\n  setWidth,\n  setStep,\n  setAnimationDuration,\n  setInfinite,\n  itemWidth,\n  frameSize,\n  step,\n  animationDuration,\n  infinite,\n}) => {\n  return (\n    <div className=\"form\">\n      <Input\n        title=\"Item Width\"\n        id=\"itemId\"\n        type=\"number\"\n        initialValue={itemWidth}\n        onChangeHandler={setWidth}\n        step={10}\n        min={130}\n      />\n\n      <Input\n        title=\"Frame Size\"\n        id=\"frameSize\"\n        type=\"number\"\n        initialValue={frameSize}\n        min={1}\n        max={5}\n        onChangeHandler={setFrameSize}\n      />\n\n      <Input\n        title=\"Step\"\n        id=\"step\"\n        type=\"number\"\n        initialValue={step}\n        min={1}\n        max={5}\n        onChangeHandler={setStep}\n      />\n\n      <Input\n        title=\"Animation Duration\"\n        id=\"animation\"\n        type=\"number\"\n        initialValue={animationDuration}\n        step={500}\n        min={0}\n        onChangeHandler={setAnimationDuration}\n      />\n\n      <Input\n        title=\"Infinite\"\n        id=\"infinite\"\n        type=\"checkbox\"\n        initialValue={infinite}\n        onChangeHandler={setInfinite}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\nimport { Form } from './components/Form';\n\ninterface State {\n  images: string[];\n  itemWidth: number;\n  frameSize: number;\n  step: number;\n  animationDuration: number;\n  infinite: boolean;\n}\nconst imagesArray = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n\nclass App extends React.PureComponent<{}, State> {\n  state = {\n    images: imagesArray,\n    itemWidth: 130,\n    frameSize: 1,\n    step: 1,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  setWidth = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ itemWidth: +event.target.value });\n  };\n\n  setFrameSize = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ frameSize: +event.target.value });\n  };\n\n  setStep = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ step: +event.target.value });\n  };\n\n  setAnimationDuration = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ animationDuration: +event.target.value });\n  };\n\n  setInfinite = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ infinite: event.target.checked });\n  };\n\n  render() {\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      step,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy=\"title\">Carousel with {images.length} images</h1>\n\n        <Carousel\n          photos={this.state.images}\n          itemWidth={itemWidth}\n          frameSize={frameSize}\n          animationDuration={animationDuration}\n          step={step}\n          infinite={infinite}\n        />\n\n        <Form\n          itemWidth={itemWidth}\n          frameSize={frameSize}\n          step={step}\n          animationDuration={animationDuration}\n          infinite={infinite}\n          setWidth={this.setWidth}\n          setFrameSize={this.setFrameSize}\n          setStep={this.setStep}\n          setAnimationDuration={this.setAnimationDuration}\n          setInfinite={this.setInfinite}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}